#Threaded port scanner
#Not working, need to come back to it as some point.

import threading
import time
import socket,subprocess,sys
from datetime import datetime
import thread
import shelve

'''Section 1'''
subprocess.call('clear',shell=True)
shelf = shelve.open("mohit.raj")
data = (shelf['desc'])

'''Section 2'''
class myThread(threading.Thread):
	def __init__(self, threadName, rmip, r1, r2, c):
		threading.Thread.__init__(self)
		self.rmip = rmip
		self.r1 = r1
		self.r2 = r2
		self.c = c
	def run(self):
		scantcp(self.threadName,self.rimp,self.r1,self.r2,self.c)

'''section 3'''
def scantcp(threadNane,rmip,r1,r2,c):
	try:
		for port in range(r1,r2):
			sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			#sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			socket.setdefaulttimeout(c)
			result = sock.connect_ex((rmip,port))

			if result == 0:
				print "Port open: -->\t", port, "--",data.get(port, "Not in database")
				sock.close()
	except Keyboardinterrupt:
		print "You stopped this."
		sys.exit()

	except socket.gaierror:
		print "Hostname could not be reached."
		sys.exit()

	shelf.close()

'''section 4'''
print "*"*60
print " \tWelcome this is the port scanner of Joe.\n	"

d=raw_input("\t Enter the domain name to scan:\t")

if (d=="D" or d == "d"):
	rmserver = raw_input("\t Enter the domain name to scan: ")
	rmip = socket.gethostbyname(rmserver)
elif (d=="I" or d=="i"):
	rmip = raw_input("\t Enter the IP Address to scan: ")
else:
	print "Wrong input"
	#rmip = gethostbyname(rmserver)
	r11 = int(raw_input("\t Enter the start port number\t"))
	r21 = int(raw_input("\t Enter the last port number\t"))
	connect = raw_input("For low connectivity press L and High connectivity press H\t")

	if(connect == "H" or connect == "h"):
		c = 1.5
	elif(connect =="L" or connect == "l"):
		c = 0.5
	else:
		print "\t Wrong input."

print "Joe's scanner is working on ", rmip
print "*"*60
t1 = datetime.now()
tp =r21-r11

tn = 30 #tn number of port handled by thread
tnum = tp/tn	#tnum number of threads
if (tp%tn != 0):
	tnum = tnum+1

if (tnum > 300):
	tn = tp/300
	tn = tn+1
	tnum = tp/tn
	if (tp%tn != 0):
		tnum = tnum+1

'''Section 5'''
threads = []

try:
	for i in range(tnum):
		#print "i is ",i
		k=1
		r2 = r11+tn
		#thread=str(i)
		thread = myThread("T1",rmip,r11,r2,c)
		thread.start()
	threads.append(thread)
	r11=r2
except:
	print "Error:unable tp start thread"

print "\t Number of Threads active:", threading.activeCount()

for t in threads:
	t.join()
print "Exiting main Thread."
t2 = datetime.now()

total = r2 - r1
print "scanning completed in ", total
